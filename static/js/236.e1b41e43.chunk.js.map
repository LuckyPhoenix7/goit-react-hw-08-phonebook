{"version":3,"file":"static/js/236.e1b41e43.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport toast from 'react-hot-toast';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const formBackgroundColor = useColorModeValue('teal.300', 'teal.700');\n  const buttonBackgroundColor = useColorModeValue('teal.400', 'teal.600');\n  const buttonHoverColor = useColorModeValue('teal.500', 'teal.500');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    try {\n      await dispatch(\n        register({\n          name: form.elements.name.value,\n          email: form.elements.email.value,\n          password: form.elements.password.value,\n        })\n      ).unwrap();\n      toast.success('Registration successful!');\n      form.reset();\n    } catch (error) {\n      toast.error(error || 'Failed to register.');\n    }\n  };\n\n  return (\n    <Box\n      bg={formBackgroundColor}\n      w=\"90%\"\n      maxW=\"md\"\n      p={8}\n      boxShadow=\"base\"\n      borderRadius=\"md\"\n      mx=\"auto\"\n      my={8}\n    >\n      <VStack as=\"form\" onSubmit={handleSubmit} autoComplete=\"off\" spacing={4}>\n        <FormControl id=\"name\" isRequired>\n          <FormLabel>Username</FormLabel>\n          <Input type=\"text\" name=\"name\" />\n        </FormControl>\n        <FormControl id=\"email\" isRequired>\n          <FormLabel>Email</FormLabel>\n          <Input type=\"email\" name=\"email\" />\n        </FormControl>\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Password</FormLabel>\n          <Input type=\"password\" name=\"password\" />\n        </FormControl>\n        <Button\n          type=\"submit\"\n          size=\"md\"\n          fontSize=\"md\"\n          width=\"full\"\n          bg={buttonBackgroundColor}\n          _hover={{\n            bg: buttonHoverColor,\n          }}\n        >\n          Register\n        </Button>\n      </VStack>\n    </Box>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n"],"names":["RegisterForm","dispatch","useDispatch","formBackgroundColor","useColorModeValue","buttonBackgroundColor","buttonHoverColor","handleSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","unwrap","toast","reset","bg","w","maxW","p","boxShadow","borderRadius","mx","my","as","onSubmit","autoComplete","spacing","id","isRequired","I","type","size","fontSize","width","_hover","Register","Helmet","createContext","errorMessage","FormControlStylesProvider","useFormControlStyles","strict","FormControlProvider","useFormControlContext","useFormControlProvider","ownProps","forwardRef","idProp","getLabelProps","context","useMultiStyleConfig","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","useState","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","ref","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","FormControl","styles","props","omitThemingProps","div","__css","cx","displayName","chakra","field","helperText","useStyleConfig","className","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","rest","passedProps","_a","label","display","FormLabel","span","useFormControlProps","ariaAttr","labelIds","readOnly","required","push","disabled","join","_b","_c","useFormControl","callAllHandlers","htmlSize","input","Input","VStack","Stack","align","direction"],"sourceRoot":""}